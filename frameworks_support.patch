diff --git a/compat/java/android/support/v4/view/ViewCompat.java b/compat/java/android/support/v4/view/ViewCompat.java
index 9637e65fb9..cc3cc26058 100644
--- a/compat/java/android/support/v4/view/ViewCompat.java
+++ b/compat/java/android/support/v4/view/ViewCompat.java
@@ -541,11 +541,11 @@ public class ViewCompat {
         }
         @Override
         public void postInvalidateOnAnimation(View view) {
-            view.invalidate();
+            view.postInvalidate();
         }
         @Override
         public void postInvalidateOnAnimation(View view, int left, int top, int right, int bottom) {
-            view.invalidate(left, top, right, bottom);
+            view.postInvalidate(left, top, right, bottom);
         }
         @Override
         public void postOnAnimation(View view, Runnable action) {
diff --git a/design/src/android/support/design/widget/BottomSheetBehavior.java b/design/src/android/support/design/widget/BottomSheetBehavior.java
index c3362a81d1..b913de19a5 100644
--- a/design/src/android/support/design/widget/BottomSheetBehavior.java
+++ b/design/src/android/support/design/widget/BottomSheetBehavior.java
@@ -385,7 +385,8 @@ public class BottomSheetBehavior<V extends View> extends CoordinatorLayout.Behav
             setStateInternal(STATE_EXPANDED);
             return;
         }
-        if (target != mNestedScrollingChildRef.get() || !mNestedScrolled) {
+        if (mNestedScrollingChildRef == null || target != mNestedScrollingChildRef.get()
+                || !mNestedScrolled) {
             return;
         }
         int top;
diff --git a/fragment/java/android/support/v4/app/FragmentHostCallback.java b/fragment/java/android/support/v4/app/FragmentHostCallback.java
index 75fde038f2..5c256d38f7 100644
--- a/fragment/java/android/support/v4/app/FragmentHostCallback.java
+++ b/fragment/java/android/support/v4/app/FragmentHostCallback.java
@@ -304,13 +304,9 @@ public abstract class FragmentHostCallback<E> extends FragmentContainer {
             mAllLoaderManagers = new SimpleArrayMap<String, LoaderManager>();
         }
         LoaderManagerImpl lm = (LoaderManagerImpl) mAllLoaderManagers.get(who);
-        if (lm == null) {
-            if (create) {
-                lm = new LoaderManagerImpl(who, this, started);
-                mAllLoaderManagers.put(who, lm);
-            }
-        } else {
-            lm.updateHostController(this);
+        if (lm == null && create) {
+            lm = new LoaderManagerImpl(who, this, started);
+            mAllLoaderManagers.put(who, lm);
         }
         return lm;
     }
@@ -350,6 +346,11 @@ public abstract class FragmentHostCallback<E> extends FragmentContainer {
     }
 
     void restoreLoaderNonConfig(SimpleArrayMap<String, LoaderManager> loaderManagers) {
+        if (loaderManagers != null) {
+            for (int i = 0, N = loaderManagers.size(); i < N; i++) {
+                ((LoaderManagerImpl) loaderManagers.valueAt(i)).updateHostController(this);
+            }
+        }
         mAllLoaderManagers = loaderManagers;
     }
 
diff --git a/fragment/java/android/support/v4/app/FragmentManager.java b/fragment/java/android/support/v4/app/FragmentManager.java
index 3baf4f9d3a..5996c9dbc7 100644
--- a/fragment/java/android/support/v4/app/FragmentManager.java
+++ b/fragment/java/android/support/v4/app/FragmentManager.java
@@ -2146,26 +2146,36 @@ final class FragmentManagerImpl extends FragmentManager implements LayoutInflate
 
     public void dispatchCreate() {
         mStateSaved = false;
+        mExecutingActions = true;
         moveToState(Fragment.CREATED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchActivityCreated() {
         mStateSaved = false;
+        mExecutingActions = true;
         moveToState(Fragment.ACTIVITY_CREATED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchStart() {
         mStateSaved = false;
+        mExecutingActions = true;
         moveToState(Fragment.STARTED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchResume() {
         mStateSaved = false;
+        mExecutingActions = true;
         moveToState(Fragment.RESUMED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchPause() {
+        mExecutingActions = true;
         moveToState(Fragment.STARTED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchStop() {
@@ -2174,21 +2184,29 @@ final class FragmentManagerImpl extends FragmentManager implements LayoutInflate
         // them.
         mStateSaved = true;
 
+        mExecutingActions = true;
         moveToState(Fragment.STOPPED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchReallyStop() {
+        mExecutingActions = true;
         moveToState(Fragment.ACTIVITY_CREATED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchDestroyView() {
+        mExecutingActions = true;
         moveToState(Fragment.CREATED, false);
+        mExecutingActions = false;
     }
 
     public void dispatchDestroy() {
         mDestroyed = true;
         execPendingActions();
+        mExecutingActions = true;
         moveToState(Fragment.INITIALIZING, false);
+        mExecutingActions = false;
         mHost = null;
         mContainer = null;
         mParent = null;
diff --git a/fragment/tests/java/android/support/v4/app/ReentrantFragment.java b/fragment/tests/java/android/support/v4/app/ReentrantFragment.java
new file mode 100644
index 0000000000..472245df2a
--- /dev/null
+++ b/fragment/tests/java/android/support/v4/app/ReentrantFragment.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.support.v4.app;
+
+import android.os.Bundle;
+
+public class ReentrantFragment extends StrictFragment {
+    private static final String FROM_STATE = "fromState";
+    private static final String TO_STATE = "toState";
+    int mFromState = 0;
+    int mToState = 0;
+    boolean mIsRestored;
+
+    public static ReentrantFragment create(int fromState, int toState) {
+        ReentrantFragment fragment = new ReentrantFragment();
+        fragment.mFromState = fromState;
+        fragment.mToState = toState;
+        fragment.mIsRestored = false;
+        return fragment;
+    }
+
+    @Override
+    public void onStateChanged(int fromState) {
+        super.onStateChanged(fromState);
+        // We execute the transaction when shutting down or after restoring
+        if (fromState == mFromState && mState == mToState
+                && (mToState < mFromState || mIsRestored)) {
+            executeTransaction();
+        }
+    }
+
+    private void executeTransaction() {
+        getFragmentManager().beginTransaction()
+                .add(new StrictFragment(), "should throw")
+                .commitNow();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(FROM_STATE, mFromState);
+        outState.putInt(TO_STATE, mToState);
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            mFromState = savedInstanceState.getInt(FROM_STATE);
+            mToState = savedInstanceState.getInt(TO_STATE);
+            mIsRestored = true;
+        }
+        super.onCreate(savedInstanceState);
+    }
+}
+
diff --git a/fragment/tests/java/android/support/v4/app/StrictFragment.java b/fragment/tests/java/android/support/v4/app/StrictFragment.java
index dfda814132..d91c161517 100644
--- a/fragment/tests/java/android/support/v4/app/StrictFragment.java
+++ b/fragment/tests/java/android/support/v4/app/StrictFragment.java
@@ -51,6 +51,10 @@ public class StrictFragment extends Fragment {
         return "(unknown " + state + ")";
     }
 
+    public void onStateChanged(int fromState) {
+        checkGetActivity();
+    }
+
     public void checkGetActivity() {
         if (getActivity() == null) {
             throw new IllegalStateException("getActivity() returned null at unexpected time");
@@ -92,7 +96,7 @@ public class StrictFragment extends Fragment {
         mCalledOnAttach = true;
         checkState("onAttach", DETACHED);
         mState = ATTACHED;
-        checkGetActivity();
+        onStateChanged(DETACHED);
     }
 
     @Override
@@ -104,7 +108,7 @@ public class StrictFragment extends Fragment {
         mCalledOnCreate = true;
         checkState("onCreate", ATTACHED);
         mState = CREATED;
-        checkGetActivity();
+        onStateChanged(ATTACHED);
     }
 
     @Override
@@ -112,8 +116,9 @@ public class StrictFragment extends Fragment {
         super.onActivityCreated(savedInstanceState);
         mCalledOnActivityCreated = true;
         checkState("onActivityCreated", ATTACHED, CREATED);
+        int fromState = mState;
         mState = ACTIVITY_CREATED;
-        checkGetActivity();
+        onStateChanged(fromState);
     }
 
     @Override
@@ -122,7 +127,7 @@ public class StrictFragment extends Fragment {
         mCalledOnStart = true;
         checkState("onStart", ACTIVITY_CREATED);
         mState = STARTED;
-        checkGetActivity();
+        onStateChanged(ACTIVITY_CREATED);
     }
 
     @Override
@@ -131,7 +136,7 @@ public class StrictFragment extends Fragment {
         mCalledOnResume = true;
         checkState("onResume", STARTED);
         mState = RESUMED;
-        checkGetActivity();
+        onStateChanged(STARTED);
     }
 
     @Override
@@ -148,7 +153,7 @@ public class StrictFragment extends Fragment {
         mCalledOnPause = true;
         checkState("onPause", RESUMED);
         mState = STARTED;
-        checkGetActivity();
+        onStateChanged(RESUMED);
     }
 
     @Override
@@ -157,7 +162,7 @@ public class StrictFragment extends Fragment {
         mCalledOnStop = true;
         checkState("onStop", STARTED);
         mState = CREATED;
-        checkGetActivity();
+        onStateChanged(STARTED);
     }
 
     @Override
@@ -166,7 +171,7 @@ public class StrictFragment extends Fragment {
         mCalledOnDestroy = true;
         checkState("onDestroy", CREATED);
         mState = ATTACHED;
-        checkGetActivity();
+        onStateChanged(CREATED);
     }
 
     @Override
@@ -174,7 +179,8 @@ public class StrictFragment extends Fragment {
         super.onDetach();
         mCalledOnDetach = true;
         checkState("onDestroy", CREATED, ATTACHED);
+        int fromState = mState;
         mState = DETACHED;
-        checkGetActivity();
+        onStateChanged(fromState);
     }
 }
diff --git a/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java b/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java
index b640f79c62..8c57dc853a 100644
--- a/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java
+++ b/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java
@@ -11160,6 +11160,11 @@ public class RecyclerView extends ViewGroup implements ScrollingView, NestedScro
                 }
             }
         }
+
+        @Override
+        public void onAnimationStarted(ViewHolder item) {
+            //do nothing
+        }
     }
 
     /**
@@ -11329,7 +11334,7 @@ public class RecyclerView extends ViewGroup implements ScrollingView, NestedScro
          *
          * @param listener The listener that must be called.
          */
-        void setListener(ItemAnimatorListener listener) {
+        protected void setListener(ItemAnimatorListener listener) {
             mListener = listener;
         }
 
@@ -11695,6 +11700,9 @@ public class RecyclerView extends ViewGroup implements ScrollingView, NestedScro
          */
         public final void dispatchAnimationStarted(ViewHolder viewHolder) {
             onAnimationStarted(viewHolder);
+            if (mListener != null) {
+                mListener.onAnimationStarted(viewHolder);
+            }
         }
 
         /**
@@ -11724,7 +11732,7 @@ public class RecyclerView extends ViewGroup implements ScrollingView, NestedScro
          * equivalent to calling {@link #isRunning()}.
          * @return true if there are any item animations currently running, false otherwise.
          */
-        public final boolean isRunning(ItemAnimatorFinishedListener listener) {
+        public boolean isRunning(ItemAnimatorFinishedListener listener) {
             boolean running = isRunning();
             if (listener != null) {
                 if (!running) {
@@ -11818,11 +11826,11 @@ public class RecyclerView extends ViewGroup implements ScrollingView, NestedScro
 
         /**
          * The interface to be implemented by listeners to animation events from this
-         * ItemAnimator. This is used internally and is not intended for developers to
-         * create directly.
+         * ItemAnimator.
          */
-        interface ItemAnimatorListener {
+        protected interface ItemAnimatorListener {
             void onAnimationFinished(ViewHolder item);
+            void onAnimationStarted(ViewHolder item);
         }
 
         /**
